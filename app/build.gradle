apply plugin: 'com.android.application'

// 默认apk输出路径
ext.appReleaseDir = "D:\\package\\as\\"
// 默认正式包后缀名
ext.appSuffixName = "_release.apk"

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "com.yhx.intelligentsms"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        // debug构建配置
        debug {
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            // apk包名称后缀，用来区分release和debug
            versionNameSuffix "_debug"
            // 不混淆
            minifyEnabled false
            // 不压缩优化
            zipAlignEnabled false
            // 不进行资源优化（删除无用资源等）
            shrinkResources false
            // 使用的签名信息
            //signingConfig signingConfigs.debugConfig
        }
        // release构建配置
        release {
            // 正式版不显示log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            // 进行混淆
            minifyEnabled true
            // 进行压缩优化
            zipAlignEnabled true
            // 进行资源优化，移除无用的resource文件
            shrinkResources true
            // 使用的签名信息
            //signingConfig signingConfigs.releaseConfig
            // 使用的混淆规则文件，前面是系统默认的文件，会全部混淆，
            // 后面是自定义不混淆的文件（domain，android四大组件，自定义view等一般是不能混淆的）
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
            //应用编译完成，自定义apk输出位置及文件名
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    //开始输出,自定义输出路径
                    output.outputFile = new File(appReleaseDir + getDate() + "_v" +
                            appVersionName + variant.productFlavors[0].name + appSuffixName)
                }
            }
        }
    }

    //指定打包后应用名称
    applicationVariants.all {variant ->
        variant.outputs.each {output ->
            def outputFile = output.outputFile
            def fileName
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                if (variant.buildType.name.equals('release')) {
                    fileName = "${defaultConfig.applicationId}_${defaultConfig.versionName}_${defaultConfig.versionCode}.apk"
                } else if (variant.buildType.name.equals('debug')) {
                    fileName = "${defaultConfig.applicationId}_${defaultConfig.versionName}_${defaultConfig.versionCode}_debug.apk"
                }
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }

    // 友盟多渠道打包
    productFlavors {
//        使用注释掉的这种方式也可以实现多渠道打包，这样就不用下面的productFlavors.all函数了
//        如果只使用占位信息定义，如wandoujia{}，则需要productFlavors.all函数同意标识
//        wandoujia {
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
//        }
        // 360手机助手
        _360 { }
        // 91手机助手
        _91 {}
        // 应用汇
        _yingyonghui {}
        // 豌豆荚
        _wandoujia { }
        // 百度手机助手
        _baidu { }
        // 安智市场
        _anzhi { }
        // 机锋
        _jifeng { }
        // 魅族市场
        _meizu { }
        // 小米市场
        _xiaomi { }
        // google商店
        _googleplay { }
        // 安卓市场
        _anzhuoshichang { }
        // 华为应用商店
        _huawei { }
        // 淘宝手机助手
        _taobao { }
    }

    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }
}

// 获取格式化时间，用来标识打包时间，同时避免命名冲突
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy_MM_dd_HHmm')
    return formattedDate
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:support-v4:26.+'
    testCompile 'junit:junit:4.12'
    compile files('libs/nineoldandroids-2.4.0.jar')
}
